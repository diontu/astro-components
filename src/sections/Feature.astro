---
// libraries
import classnames from 'classnames'

// components
import Title from '@components/Title.astro'
import Grid from '@components-react/Grid/Grid'
import GridItem from '@components-react/Grid/GridItem'

// types
import type { GapNumbers } from '@components-react/Grid/Grid'

/**
 * This component accepts the following:
 * - `<slot />`
 * - `<slot name="feature-secondary" />`
 *
 * The secondary feature does not show when the primary feature is centered.
 *
 */
interface Props {
    feature?: string
    title: string
    description: string
    /**
     * Secondary feature will not show in `center` alignment.
     * `right` align has no effect on mobile.
     */
    align?: 'left' | 'center' | 'right'
    /** makes it full width */
    isFullWidth?: boolean
    /** Invert the text color to a lighter color */
    invertTextColor?: boolean
    /** The secondary feature does not normally show in mobile */
    secondary?: {
        isImage?: boolean
        gap?: GapNumbers
        hideInMobile?: boolean
    }
}

const {
    feature,
    title,
    description,
    align = 'left',
    isFullWidth = false,
    invertTextColor = false,
    secondary = {
        isImage: false,
        gap: undefined,
        hideInMobile: false,
    },
} = Astro.props

const sectionClasses = classnames({
    'feature-section': true,
    invertTextColor: invertTextColor,
})
const primaryClasses = classnames({
    'feature-primary': true,
    [align]: true,
})
const secondaryClasses = classnames({
    'feature-secondary': true,
    hideInMobile: secondary.hideInMobile,
    [`feature-secondary-align-right`]: align === 'right' && secondary.isImage, // if alignment of primary content is on the right
})

const showSecondaryOnRight =
    align === 'left' && Astro.slots.has('feature-secondary') && !isFullWidth
const showSecondaryOnLeft =
    align === 'right' && Astro.slots.has('feature-secondary') && !isFullWidth
---

<section class={sectionClasses}>
    <Grid gap={secondary.gap}>
        {
            showSecondaryOnLeft && (
                <GridItem sm={12} base={6}>
                    <div class={secondaryClasses}>
                        <slot name="feature-secondary" />
                    </div>
                </GridItem>
            )
        }
        <GridItem sm={12} base={isFullWidth ? 12 : 6}>
            <div class={primaryClasses}>
                {feature && <Title variant={2}>{feature}</Title>}
                <Title variant={1} noPadding>{title}</Title>
                <div class="feature-description">{description}</div>
                <slot />
            </div>
        </GridItem>
        {
            showSecondaryOnRight && (
                <GridItem sm={12} base={6}>
                    <div class={secondaryClasses}>
                        <slot name="feature-secondary" />
                    </div>
                </GridItem>
            )
        }
    </Grid>
</section>

<style>
    .feature-section {
        margin: 32px 0;
    }
    .feature-primary {
        display: flex;
        flex-direction: column;
    }
    .feature-secondary {
        position: relative;
        left: 0;
        overflow-x: visible;
    }
    .hideInMobile {
        display: none;
    }
    .invertTextColor {
        color: var(--text-color-inverted);
    }
    @media screen and (min-width: 640px) {
        .feature-section {
            flex-direction: row;
        }
        .feature-secondary {
            display: flex;
        }
        .feature-secondary-align-right {
            right: 0;
            direction: rtl;
        }
    }
    .center {
        margin-left: auto;
        margin-right: auto;
        align-items: center;
        text-align: center;
    }
    .right {
        margin-left: auto;
    }
    .feature-description {
        margin: 20px 0;
    }
</style>
