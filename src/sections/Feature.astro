---
// libraries
import classnames from 'classnames'

// components
import Title from '@components/Title.astro'
import Grid from '@components-react/Grid/Grid'
import GridItem, { type ColumnNumber } from '@components-react/Grid/GridItem'

// types
import type { GapNumbers } from '@components-react/Grid/Grid'
import type { Size } from '@src/section-wrappers/SimpleWrapper.astro'

/**
 * This component accepts the following:
 * - `<slot />`
 * - `<slot name="feature-secondary" />`
 *
 * The secondary feature does not show when the primary feature is centered.
 *
 */
interface Props {
    paddingTop?: Size
    paddingBottom?: Size
    /** Invert the text color to a lighter color */
    invertTextColor?: boolean
    /** gap between primary and secondary content */
    gap?: GapNumbers
    /** The primary feature props */
    primary: {
        /** h2 text */
        feature?: string
        /** h1 text */
        title: string
        /** title variant */
        titleVariant?: 'landing-page' | 1
        /** description */
        description: string
        /**
         * Secondary feature will not show in `center` alignment.
         * `right` align has no effect on mobile.
         */
        align: 'left' | 'center' | 'right'
        /** amount of columns occupied */
        col?: ColumnNumber
    }
    /** The secondary feature props */
    secondary?: {
        isImage?: boolean
        hideInMobile?: boolean
    }
}

const {
    paddingTop = 'none',
    paddingBottom = 'none',
    invertTextColor = false,
    gap = undefined,
    primary = {
        feature: '',
        title: '',
        titleVariant: 1,
        description: '',
        align: 'left',
        col: undefined,
    },
    secondary = {
        isImage: false,
        gap: undefined,
        hideInMobile: false,
    },
} = Astro.props

const sectionClasses = classnames({
    'feature-section': true,
    invertTextColor: invertTextColor,
})
const primaryClasses = classnames({
    'feature-primary': true,
    [primary.align]: true,
})
const secondaryClasses = classnames({
    'feature-secondary': true,
    hideInMobile: secondary.hideInMobile,
    [`feature-secondary-align-right`]:
        primary.align === 'right' && secondary.isImage, // if alignment of primary content is on the right
})

const showSecondaryOnRight =
    primary.align === 'left' &&
    Astro.slots.has('feature-secondary') &&
    primary.col !== 12
const showSecondaryOnLeft =
    primary.align === 'right' &&
    Astro.slots.has('feature-secondary') &&
    primary.col !== 12

const primaryColumns = primary.col ?? 6
const secondaryColumns = (12 - primaryColumns) as ColumnNumber
---

<section
    class={sectionClasses}
    style={{
        paddingTop: `var(--section-wrapper-padding-${paddingTop})`,
        paddingBottom: `var(--section-wrapper-padding-${paddingBottom})`,
    }}
>
    <Grid gap={gap}>
        {
            showSecondaryOnLeft && (
                <GridItem sm={12} base={secondaryColumns}>
                    <div class={secondaryClasses}>
                        <slot name="feature-secondary" />
                    </div>
                </GridItem>
            )
        }
        <GridItem sm={12} base={primaryColumns}>
            <div class={primaryClasses}>
                {
                    primary.feature && (
                        <Title variant={2}>{primary.feature}</Title>
                    )
                }
                <Title variant={primary.titleVariant ?? 1} noPadding
                    >{primary.title}</Title
                >
                <div class="feature-description">{primary.description}</div>
                <slot />
            </div>
        </GridItem>
        {
            showSecondaryOnRight && (
                <GridItem sm={12} base={secondaryColumns}>
                    <div class={secondaryClasses}>
                        <slot name="feature-secondary" />
                    </div>
                </GridItem>
            )
        }
    </Grid>
</section>

<style>
    .feature-section {
        margin: 32px 0;
    }
    .feature-primary {
        display: flex;
        flex-direction: column;
    }
    .feature-secondary {
        position: relative;
        left: 0;
        overflow-x: visible;
    }
    .hideInMobile {
        display: none;
    }
    .invertTextColor {
        color: var(--text-color-inverted);
    }
    @media screen and (min-width: 640px) {
        .feature-section {
            flex-direction: row;
        }
        .feature-secondary {
            display: flex;
        }
        .feature-secondary-align-right {
            right: 0;
            direction: rtl;
        }
    }
    .center {
        margin-left: auto;
        margin-right: auto;
        align-items: center;
        text-align: center;
    }
    .right {
        margin-left: auto;
    }
    .feature-description {
        margin: 20px 0;
        opacity: var(--opacity-de-emphasize-text);
    }
</style>
